[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\CONSULTOR\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\CONSULTOR\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.3 (Oracle Corporation Java 20.0.1)
[debug]       Load.loadUnit: plugins took 83.6171ms
[debug]       Load.loadUnit: defsScala took 0.1995ms
[debug] [Loading] Scanning directory C:\Users\CONSULTOR\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\CONSULTOR\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.7652 ms
[debug]           Load.resolveProject(global-plugins) took 37.7482ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\CONSULTOR\.sbt\1.0\plugins, plugins: List(<none>))) took 84.971ms
[debug] [Loading] Done in C:\Users\CONSULTOR\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 108.1662ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2074ms
[debug]     Load.loadUnit(file:/C:/Users/CONSULTOR/.sbt/1.0/plugins/, ...) took 201.4514ms
[debug]   Load.apply: load took 403.9169ms
[debug]   Load.apply: resolveProjects took 4.1392ms
[debug]   Load.apply: finalTransforms took 52.4364ms
[debug]   Load.apply: config.delegates took 8.8095ms
[debug]   Load.apply: Def.make(settings)... took 363.2411ms
[debug]   Load.apply: structureIndex took 79.2886ms
[debug]   Load.apply: mkStreams took 1.4584ms
[info] loading global plugins from C:\Users\CONSULTOR\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5189.7511ms
[debug]           Load.loadUnit: plugins took 13.2794ms
[debug]           Load.loadUnit: defsScala took 0.0021ms
[debug] [Loading] Scanning directory C:\Codigos\Scala\ThePythonWorkbookButItsScala\project
[debug]             Load.loadUnit: mkEval took 3.5571ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Codigos\Scala\ThePythonWorkbookButItsScala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6088 ms
[info] loading settings for project thepythonworkbookbutitsscala-build from idea.sbt ...
[debug]               Load.resolveProject(thepythonworkbookbutitsscala-build) took 8.5811ms
[debug]             Load.loadTransitive: finalizeProject(Project(id thepythonworkbookbutitsscala-build, base: C:\Codigos\Scala\ThePythonWorkbookButItsScala\project, plugins: List(<none>))) took 10.8391ms
[debug] [Loading] Done in C:\Codigos\Scala\ThePythonWorkbookButItsScala\project, returning: (thepythonworkbookbutitsscala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1822.6878ms
[debug]           Load.loadUnit: cleanEvalClasses took 16.7925ms
[debug]         Load.loadUnit(file:/C:/Codigos/Scala/ThePythonWorkbookButItsScala/project/, ...) took 1853.6728ms
[debug]       Load.apply: load took 1855.4408ms
[debug]       Load.apply: resolveProjects took 0.1948ms
[debug]       Load.apply: finalTransforms took 14.9525ms
[debug]       Load.apply: config.delegates took 0.5839ms
[debug]       Load.apply: Def.make(settings)... took 77.5237ms
[debug]       Load.apply: structureIndex took 24.9936ms
[debug]       Load.apply: mkStreams took 0.0037ms
[info] loading project definition from C:\Codigos\Scala\ThePythonWorkbookButItsScala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3502.836ms
[debug]     Load.loadUnit: defsScala took 0.0048ms
[debug] [Loading] Scanning directory C:\Codigos\Scala\ThePythonWorkbookButItsScala
[debug]       Load.loadUnit: mkEval took 0.2678ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.3912 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 28.4563ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Codigos\Scala\ThePythonWorkbookButItsScala, plugins: List(<none>))) took 32.5859ms
[debug] [Loading] Done in C:\Codigos\Scala\ThePythonWorkbookButItsScala, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 934.1206ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.3936ms
[debug]   Load.loadUnit(file:/C:/Codigos/Scala/ThePythonWorkbookButItsScala/, ...) took 4445.2173ms
[debug] Load.apply: load took 4447.1524ms
[debug] Load.apply: resolveProjects took 0.1696ms
[debug] Load.apply: finalTransforms took 21.1455ms
[debug] Load.apply: config.delegates took 0.2847ms
[debug] Load.apply: Def.make(settings)... took 45.4858ms
[debug] Load.apply: structureIndex took 15.7928ms
[debug] Load.apply: mkStreams took 0.0023ms
[info] set current project to ejercicioScala (in build file:/C:/Codigos/Scala/ThePythonWorkbookButItsScala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62519 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62519, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ejercicioScala (in build file:/C:/Codigos/Scala/ThePythonWorkbookButItsScala/)
[debug] > Exec(idea-shell, None, None)
